#In order to create a normalized value for the building permits issued in each council district, you will need to find the area of each council district. Remember that you can leverage the area attribute of a GeoSeries to do this. You will need to convert permit_counts to a DataFrame so you can merge it with the council_districts data. Both permit_counts and council_districts are in your workspace.

#Instructions 1/4
#18 XP
#Get the area of each council district and store it in a new column, area, in the council_districts GeoDataFrame. Print the first two rows.

# Create an area column in council_districts
council_districts['area'] = council_districts.geometry.area
print(council_districts.head(2))

#Instructions 2/4
#25 XP
#Next convert permit_counts to a DataFrame with the .to_frame() method, and print the first two rows.

# Convert permit_counts to a DataFrame
permits_df = permit_counts.to_frame()
print(permits_df.head(2))

#Instructions 3/4
#25 XP
#Reset the index using the inplace = True argument and set the columns attribute to a list with the names district and bldg_permits. Print the first two rows again to see what permits_df looks like now.

# Reset index and column names
permits_df.reset_index(inplace=True)
permits_df.columns = ['district', 'bldg_permits']
print(permits_df.head(2))

#Instructions 4/4
#25 XP
#Create a new GeoDataFrame called districts_and_permits by merging council_districts and permits_df on the district column. Take a look at the first two rows.

# Merge council_districts and permits_df: 
districts_and_permits = pd.merge(council_districts, permits_df, on = 'district')
print(districts_and_permits.head(2))
