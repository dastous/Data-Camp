#Compiling a sequential model
#In this exercise, you will work towards classifying letters from the Sign Language MNIST dataset; however, you will adopt a different network architecture than what you used in the previous exercise. There will be fewer layers, but more nodes. Additionally, you will compile the model to use the adam optimizer and the categorical_crossentropy loss. You will also use a method in keras to summarize your model's architecture. Note that keras has been imported from tensorflow for you.

#Instructions
#100 XP
#In the first dense layer, set the number of nodes to 16, the activation to sigmoid, and the input_shape to (784,).
#Set the output layer to be dense, have 4 nodes, and use a softmax activation function.
#Compile the model using an adam optimizer and categorical_crossentropy loss function.
#Run your code to see what model.summary() tells you about your model's architecture.


# Define a Keras sequential model
model = keras.Sequential()

# Define the first dense layer
model.add(keras.layers.Dense(16, activation='sigmoid', input_shape=(784,)))

# Define the output layer
model.add(keras.layers.Dense(4, activation='softmax'))

# Compile the model
model.compile('adam', loss='categorical_crossentropy')

# Print a model summary
print(model.summary())
