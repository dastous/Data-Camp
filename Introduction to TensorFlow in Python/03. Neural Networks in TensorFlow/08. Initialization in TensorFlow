#Initialization in TensorFlow
#A good initialization can reduce the amount of time needed to find the global minimum. In this exercise, we will initialize weights and biases for a neural network that will be used to predict credit card default decisions. To build intuition, we will use the low-level, linear algebraic approach, rather than making use of convenience functions and high-level keras operations. We will also expand the set of input features from 3 to 23. Several operations have been imported from tensorflow: Variable(), random(), and ones().

#Instructions
#100 XP
#Initialize the layer 1 weights, weights1, as a Variable() with shape [23,7], drawn from a random normal distribution.
#Initialize the layer 1 bias using ones.
#Initialize weights2 as a random normal Variable() with shape [7,1].
#Define bias2 as a Variable() and set its initial value to 0.0.

# Define the layer 1 weights
weights1 = Variable(random.normal([23,7]))

# Initialize the layer 1 bias
bias1 = Variable(ones([7]))

# Define the layer 2 weights
weights2 = Variable(random.normal([7,1]))

# Define the layer 2 bias
bias2 = Variable(ones([0]))
